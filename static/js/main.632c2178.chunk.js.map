{"version":3,"sources":["images/kenny-weigel-wood-bg-cropped.jpg","components/Header.js","components/About.js","components/Contact.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","src","headshot","alt","About","Fragment","Contact","className","href","Footer","target","rel","App","src_components_Header","src_components_About","src_components_Contact","src_components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kTCYzBC,SARA,kBACbC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAUC,IAAI,iBACxBL,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,iDC6BWI,SAlCD,kBACZN,EAAAC,EAAAC,cAAAF,EAAAC,EAAAM,SAAA,KACEP,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,uZAQFF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,yDACAF,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,qWAOFF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,8DACAF,EAAAC,EAAAC,cAAA,gDACAF,EAAAC,EAAAC,cAAA,sSCjBSM,SAPC,kBACdR,EAAAC,EAAAC,cAAA,WAASO,UAAU,WACjBT,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,gCAAR,eCWWC,SAdA,kBACbX,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,2CAA2CE,OAAO,SAASC,IAAI,uBACrEb,EAAAC,EAAAC,cAAA,KAAGO,UAAU,2BAEfT,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,iCAAiCE,OAAO,SAASC,IAAI,uBAC3Db,EAAAC,EAAAC,cAAA,KAAGO,UAAU,yBAEfT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2CCISY,SATH,kBACVd,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,SCAgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.632c2178.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kenny-weigel-wood-bg-cropped.c972fc9e.jpg\";","import React from 'react';\nimport headshot from '../images/kenny-weigel-wood-bg-cropped.jpg';\nimport './Header.css';\n\nconst Header = () => (\n  <header>\n    <img src={headshot} alt=\"Kenny Weigel\" />\n    <h1>Kenny Weigel</h1>\n    <h2>Software Engineer, Portsmouth NH</h2>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport './About.css';\n\nconst About = () => (\n  <>\n    <section>\n      <p>\n        Highly motivated and solution-oriented full-stack software engineer with extensive\n        experience designing, building, launching, and maintaining web applications. Proven track\n        record working in all levels of the tech stack crafting maintainable solutions with\n        thoughtful architecture. Possesses big-picture mindset focused on making sure development\n        efforts are meeting underlying business needs.\n      </p>\n    </section>\n    <section>\n      <h3>Software Engineer, September 2013 - Present</h3>\n      <h4>ATOM - Portsmouth, NH</h4>\n      <p>\n        Worked on dozens of different client projects of various sizes utilizing different tech\n        stacks and architectures. Led development efforts on several projects from initial\n        requirements gathering and planning stages all the way through launch. Developed internal\n        coding standards and procedures, interviewed new developers, and met with clients.\n      </p>\n    </section>\n    <section>\n      <h3>Software QA Engineer, June 2012 - September 2013</h3>\n      <h4>KepwareTechnologies - Portland, ME</h4>\n      <p>\n        Developed, documented, and executed test plans for features and protocols added to an\n        existing Windows based communication server application used in the industrial automation\n        industry. Wrote automated tests in Javascript and C# to ensure that product meets required\n        standards.\n      </p>\n    </section>\n  </>\n);\n\nexport default About;\n","import React from 'react';\nimport './Contact.css';\n\nconst Contact = () => (\n  <section className=\"contact\">\n    <h2>Contact</h2>\n    <a href=\"mailto:kennyweigel@gmail.com\">Email Me</a>\n  </section>\n);\n\nexport default Contact;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => (\n  <footer>\n    <a href=\"https://www.linkedin.com/in/kennyweigel/\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <i className=\"fab fa-linkedin fa-2x\" />\n    </a>\n    <a href=\"https://github.com/kennyweigel\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <i className=\"fab fa-github fa-2x\" />\n    </a>\n    <div>\n      <small>&copy; Kenny Weigel 2019</small>\n    </div>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport Header from './components/Header';\nimport About from './components/About';\nimport Contact from './components/Contact';\nimport Footer from './components/Footer';\nimport './App.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <About />\n    <Contact />\n    <Footer />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}